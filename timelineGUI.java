package Timeline;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;


public class timelineGUI extends javax.swing.JFrame {

    private String currentTitle;
    private String currentInfoBox;
    
    int endYear;
    int arrLength;
    String timelineName;
    
    Event[] timelineArr;
    
    /**
     * Creates new form timelineGUI
     */
    public timelineGUI(){
        initComponents();
        
        //Make all new timeline components invisible to begin with
        namePrompt.setVisible(false);
        nameField.setVisible(false);
        endYearPrompt.setVisible(false);
        endYearField.setVisible(false);
        lengthPrompt.setVisible(false);
        lengthField.setVisible(false);
        submitButton.setVisible(false);
        yearChoiceNew.setVisible(false);
        errMsg.setVisible(false);
        
        Timeline.setVisible(false);
        Edit.setVisible(false);
        Search.setVisible(false);
        Title.setVisible(false);
        TitleLabel.setVisible(false);
        YearLabel.setVisible(false);
        infoBox.setVisible(false);
        frame.setVisible(false);
        editPhoto.setVisible(false);
        Edit.setVisible(false);
        Publish.setVisible(false);
        yearChoice.setVisible(false);
        jScrollPane1.setVisible(false);        
        
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        openButton = new javax.swing.JButton();
        titleText = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        endYearPrompt = new javax.swing.JLabel();
        lengthField = new javax.swing.JTextField();
        endYearField = new javax.swing.JTextField();
        newButton = new javax.swing.JButton();
        namePrompt = new javax.swing.JLabel();
        lengthPrompt = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        Search = new javax.swing.JTextField();
        Edit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoBox = new javax.swing.JTextArea();
        TitleLabel = new javax.swing.JLabel();
        Timeline = new javax.swing.JSlider();
        Title = new javax.swing.JTextField();
        editPhoto = new javax.swing.JButton();
        frame = new javax.swing.JLabel();
        YearLabel = new javax.swing.JLabel();
        Publish = new javax.swing.JButton();
        yearChoice = new javax.swing.JButton();
        yearChoiceNew = new javax.swing.JButton();
        errMsg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        titleText.setText("Welcome to Timeline!  Would you like to open an existing timeline or create a new one?");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        endYearPrompt.setText("In what year would you like your timeline to end?");

        lengthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lengthFieldActionPerformed(evt);
            }
        });

        endYearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endYearFieldActionPerformed(evt);
            }
        });

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        namePrompt.setText("What would you like to call your timeline?");

        lengthPrompt.setText("How far back in time would you like to go?");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        infoBox.setEditable(false);
        infoBox.setColumns(20);
        infoBox.setRows(5);
        infoBox.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 51, 153)));
        jScrollPane1.setViewportView(infoBox);

        TitleLabel.setText("Title");

        Timeline.setMajorTickSpacing(100);
        Timeline.setMaximum(0);
        Timeline.setMinorTickSpacing(1);
        Timeline.setPaintTicks(true);
        Timeline.setSnapToTicks(true);
        Timeline.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TimelineStateChanged(evt);
            }
        });

        Title.setEditable(false);
        Title.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 51, 153)));

        editPhoto.setText("Edit Photo");
        editPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPhotoActionPerformed(evt);
            }
        });

        YearLabel.setText("Year");

        Publish.setText("Publish");
        Publish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PublishActionPerformed(evt);
            }
        });

        yearChoice.setText("C.E.");
        yearChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearChoiceActionPerformed(evt);
            }
        });

        yearChoiceNew.setText("C.E.");
        yearChoiceNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearChoiceNewActionPerformed(evt);
            }
        });

        errMsg.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        errMsg.setForeground(new java.awt.Color(255, 0, 0));
        errMsg.setText("* The timeline must be at least 1 year in length AND less than 1 million");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Timeline, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(openButton)
                                .addGap(18, 18, 18)
                                .addComponent(newButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(namePrompt)
                                .addGap(25, 25, 25)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Edit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Publish)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editPhoto))
                                    .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(frame, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearChoice))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TitleLabel)
                                .addGap(73, 73, 73)
                                .addComponent(YearLabel))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleText))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(endYearPrompt)
                        .addGap(25, 25, 25)
                        .addComponent(endYearField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearChoiceNew))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(lengthPrompt)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(errMsg))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(submitButton)))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(newButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namePrompt)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endYearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endYearPrompt)
                    .addComponent(yearChoiceNew))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitButton)
                    .addComponent(lengthPrompt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(YearLabel)
                    .addComponent(TitleLabel)
                    .addComponent(errMsg))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearChoice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Timeline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(frame, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Edit)
                            .addComponent(Publish)
                            .addComponent(editPhoto)))
                    .addComponent(jScrollPane1))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    
    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {                                       
                
        int input = Integer.parseInt(Search.getText());
        if(yearChoice.getText().equals("B.C.E."))
        {
            input = arrLength - endYear - input;
        }
        else
        {
            input = arrLength - (endYear-input);
        }
        if(!(input>arrLength && input<0)) //as long as the input does not exceed the length of the timeline and is not less than 0
        { 
            Timeline.setValue(input);
            YearLabel.setText(timelineArr[Timeline.getValue()].getYear());
        }
    }                                      

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        titleText.setVisible(false);
        namePrompt.setVisible(false);
        nameField.setVisible(false);
        endYearPrompt.setVisible(false);
        endYearField.setVisible(false);
        lengthPrompt.setVisible(false);
        lengthField.setVisible(false);
        submitButton.setVisible(false);
        yearChoiceNew.setVisible(false);
        openButton.setVisible(false);
        newButton.setVisible(false);
        errMsg.setVisible(false);
        

        buildNewTimeline();
        
    }                                            

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        titleText.setVisible(false);
        buildTimeline();
    }                                          

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        //Wait for the user to input data into the input boxes one step at a time, until all information is accurate and can be used to build the new timeline
        namePrompt.setVisible(true);
        nameField.setVisible(true);
    }                                         

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {                                     
        
        currentInfoBox = infoBox.getText(); //get the current values of the text areas
        currentTitle = Title.getText();
        System.out.println(currentTitle);

        infoBox.setEditable(true); //set the textAreas to be editable
        Title.setEditable(true);
        
        System.out.println(Title.isEditable());
        
        Timeline.setEnabled(false); //disable the user from being able to use the slider until the editing has been published
        Search.setEditable(false);
        editPhoto.setVisible(false);
        Publish.setVisible(true); //make the publish button visible
        
    }                                    

    private void PublishActionPerformed(java.awt.event.ActionEvent evt) {                                        

        if(!currentInfoBox.equals("") && !currentTitle.equals(""))
        {
            System.out.println("Editing an existing event...");

            if(!(currentTitle.equals(Title.getText())))
            { //if the Title has been changed
                editTitle();//edit the title
            }

            if(!(currentInfoBox.equals(infoBox.getText())))
            { //if the info has been changed
                editInfoBox(); //edit the info
            }
        }
        
        else //else if the fields are empty, indicating the user intends to make a new event
        {
            System.out.println("Creating new event...");
            File parentDir = new File ("Timelines");
            File timelineFile = new File(parentDir, timelineName); //find the file to be written to
            try
            {
                FileWriter file = new FileWriter(timelineFile,true); //Make a new FileWriter with append = true so that new events will be appended instead of overwriting existing data
                PrintWriter shovel = new PrintWriter(file);
                shovel.println(Timeline.getValue());
                shovel.println(Title.getText());
                timelineArr[Timeline.getValue()].setTitle(Title.getText());
                shovel.println(infoBox.getText());
                timelineArr[Timeline.getValue()].setInfo(infoBox.getText());
                shovel.println("null");
                shovel.close();
            }
            catch(FileNotFoundException e)
            {
                // FileReader constructor might throw this exception
                System.err.println("Error: file \"" + timelineFile + "\" does not exist");
            }
            catch(IOException e)
            {
                // readLine() method might throw this exception
                System.err.println("Error: something bad happened reading" + timelineFile +", the file may be corrupt.  Editing the file independently of this program may cause problems" );
            }
        }
        
        Publish.setVisible(false); // hide the publish button
        infoBox.setEditable(false); //set the textAreas to be uneditable
        Title.setEditable(false);
        Timeline.setEnabled(true); // enable the JSlider
        Search.setEditable(true);
        editPhoto.setVisible(true);
    }                                       

    private void editPhotoActionPerformed(java.awt.event.ActionEvent evt) {                                          
        editPhoto();
    }                                         

    private void TimelineStateChanged(javax.swing.event.ChangeEvent evt) {                                      
        int value=Timeline.getValue();
        YearLabel.setText(timelineArr[value].getYear());
        if( (timelineArr[value].getInfo() !=null) || (timelineArr[value].getTitle() !=null) || (timelineArr[value].getImage() !=null) ) {
            Event e = timelineArr[value]; // Find the corresponding event from the event array
            setEventGui(e.getYear(),e.getTitle(),e.getInfo(),e.getImage()); //set the components of the GUI appropriately
            System.out.println("Loading Event... \""+ e.getTitle()+"\"");
            //System.out.println("Year: " + e.getYear() + "\n" + "Title: " + e.getTitle() + "\n" + "Info: " + e.getInfo() + "\n" + "Image: " + e.getImage());
        }
        else{
            //System.out.println("null event");
            setEmptyEventGUI(value);
        }
    }                                     

    private void endYearFieldActionPerformed(java.awt.event.ActionEvent evt) {                                             
        endYear = Integer.parseInt(endYearField.getText());
        System.out.println("year: " + endYear);
        lengthPrompt.setVisible(true);
        lengthField.setVisible(true);
    }                                            

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {                                          
        
        timelineName = nameField.getText();
        System.out.println("timeline name: " + timelineName);
        endYearPrompt.setVisible(true);
        endYearField.setVisible(true);
        yearChoiceNew.setVisible(true);
        
    }                                         

    private void lengthFieldActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try{
        arrLength = Integer.parseInt(lengthField.getText());
        } catch(NumberFormatException e){
            errMsg.setVisible(true);
        }
        System.out.println("arrLength: " + arrLength);
        //As long as the Timeline specified will be less than a million years long AND bigger than 0 allow the user to create the timeline
        if(arrLength>0 && arrLength<=1000000){
            errMsg.setVisible(false);
            submitButton.setVisible(true);
        }
        else{
           errMsg.setVisible(true);
        }
        
    }                                           

    private void yearChoiceActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(yearChoice.getText().equals("C.E."))
            yearChoice.setText("B.C.E.");
        else
            yearChoice.setText("C.E.");
    }                                          

    private void yearChoiceNewActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if(yearChoiceNew.getText().equals("C.E."))
            yearChoiceNew.setText("B.C.E.");
        else
            yearChoiceNew.setText("C.E.");  
    }                                             
/*********************************************************************************************************************************************************************/
    
    
    
/*********************************************************************************************************************************************************************/
    
/*********************************************************************************************************************************************************************/
    private void editPhoto()
    {
        JFileChooser fileChooser = new JFileChooser();
        File currentDIR = new File("Timelines");
        fileChooser.setCurrentDirectory(currentDIR);
        fileChooser.setDialogTitle("Choose an image");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("jpg, gif and png images", "jpg", "gif", "png");
        fileChooser.setFileFilter(filter); //set the file filter to only search for png, jpg and gif images.
        this.getContentPane().add(fileChooser);
        fileChooser.setVisible(true);
        
        BufferedImage img=null;
        String imgName=null;
        try  //try to create the image    
        {
                int ret = fileChooser.showDialog(null, "Attach Image"); //creates a custom file chooser dialog with a custom "Attach Image" button
                
                if(ret == fileChooser.APPROVE_OPTION) //if the button has been clicked, get the selected file
                {
                    img = ImageIO.read(fileChooser.getSelectedFile());
                    imgName = fileChooser.getName(fileChooser.getSelectedFile());
                }
        }
        catch (IOException e) 
        {
            System.err.println(imgName + "is not a valid image");
        }

        if(img != null) //if the image is not null
            { // Make a JLabel that will contain an ImageIcon object.  The ImageIcon object takes a Buffered Image as parameters
               if(img.getWidth()>400 || img.getHeight()>400)
               { //if the image is large, divide it in half
                Image image = (img.getScaledInstance((img.getWidth()/2),(img.getHeight()/2),1)); //reduce the size of the image
                frame.setIcon(new ImageIcon(image));
               }
               else{
                frame.setIcon(new ImageIcon(img));
               }
            }
        
        File parentDir = new File ("Timelines");
        File timelineFile = new File(parentDir, timelineName); //find the file to be written to
        String currentLine="love";
        try
        {
            File tmp = File.createTempFile("tmp",".txt"); //make a temporary file
            BufferedReader br = new BufferedReader(new FileReader(timelineFile)); 
            BufferedWriter bw = new BufferedWriter(new FileWriter(tmp));

            while(!(currentLine.equals( Integer.toString( Timeline.getValue() ) ) ) )
            { //while the line does not have the current event's index
                currentLine = br.readLine();
                bw.write(currentLine+"\n"); //write the current line to the temp file
            }
            
            bw.write(br.readLine()+"\n"); //write the title
            bw.write(br.readLine()+"\n"); //write the info
            br.readLine(); //skip over the line with the photo
            
            bw.write(imgName + "\n"); //write the image name to the temp file
            
            timelineArr[Timeline.getValue()].setImage(img);

             while ((currentLine = br.readLine()) != null) //read everthing after the title and write it to the temp file
             {
              bw.write(currentLine+"\n");
             }

             bw.close(); //close the files
             br.close();

            File oldFile = timelineFile; //make a copy of the old file
            if (oldFile.delete()) //delete the file, if successful rename the tmp file and make it the usable file
                tmp.renameTo(oldFile);
        }
        catch(FileNotFoundException e)
        {
            // FileReader constructor might throw this exception
            System.err.println("Error: file \"" + timelineFile + "\" does not exist"); 
        }
        catch(IOException e)
        {
            // readLine() method might throw this exception
            System.err.println("Error: something bad happened reading" + timelineFile +", the file may be corrupt.  Editing the file independently of this program may cause problems" ); 
        }  

    }
    
    private void editTitle()
    {
        System.out.println("Editing title");     
        File parentDir = new File ("Timelines");
        File timelineFile = new File(parentDir, timelineName); //find the file to be written to
        String currentLine="love";
        try
        {
            File tmp = File.createTempFile("tmp",".txt"); //make a temporary file
            BufferedReader br = new BufferedReader(new FileReader(timelineFile));  //make a reader for the current file
            BufferedWriter bw = new BufferedWriter(new FileWriter(tmp)); //make a writer for the tmp file

            while(!(currentLine.equals( Integer.toString( Timeline.getValue() ) ) ) )
            { //while the line does not have the current event's index
                currentLine = br.readLine();
                bw.write(currentLine+"\n"); //write the current line to the temp file
            }
            
            br.readLine(); //read the line containing the title (skipping it)
            bw.write(Title.getText()+"\n"); //write the edited text to the temp file
            
            timelineArr[Timeline.getValue()].setTitle(Title.getText()); //update the array

             while ((currentLine = br.readLine()) != null) //read everthing after the title and write it to the temp file
             {
              bw.write(currentLine+"\n");
             }

             bw.close(); //close the files
             br.close();

            File oldFile = timelineFile; //make a copy of the old file
            if (oldFile.delete()) //delete the file, if successful rename the tmp file and make it the usable file
                tmp.renameTo(oldFile);
        }
        catch(FileNotFoundException e)
        {
            // FileReader constructor might throw this exception
            System.err.println("Error: file \"" + timelineFile + "\" does not exist"); 
        }
        catch(IOException e)
        {
            // readLine() method might throw this exception
            System.err.println("Error: something bad happened reading" + timelineFile +", the file may be corrupt.  Editing the file independently of this program may cause problems" ); 
        }  
    }
    
    private void editInfoBox()
    {
        System.out.println("Editing event information");
        File parentDir = new File ("Timelines");
        File timelineFile = new File(parentDir,timelineName); //find the file to be written to
        String currentLine="love";
        try
        {
            File tmp = File.createTempFile("tmp",".txt"); //make a temporary file
            BufferedReader br = new BufferedReader(new FileReader(timelineFile)); 
            BufferedWriter bw = new BufferedWriter(new FileWriter(tmp));

            bw.write(br.readLine()+"\n"); 
            //read the first line and write it to the temp file, in case by chance the year we want to edit is the length of the timeline

            while(!(currentLine.equals( Integer.toString( Timeline.getValue() ) ) ) )
            { //while the line does not have the current event's index
                currentLine = br.readLine();
                bw.write(currentLine+"\n"); //write the current line to the temp file
            }

            bw.write(br.readLine()+"\n"); //read the line containing the title and print it
            br.readLine(); //read the line containg the old info (skipping it)
            bw.write(infoBox.getText()+"\n"); //write the edited text to the temp file
            
            timelineArr[Timeline.getValue()].setInfo(infoBox.getText()); //update the array

             while ((currentLine = br.readLine()) != null) //read everthing after the info and write it to the temp file
             {
              bw.write(currentLine+"\n");
             }

             bw.close(); //close the files
             br.close();

            File oldFile = timelineFile; //make a copy of the old file
            if (oldFile.delete()) //delete the file, if successful rename the tmp file and make it the usable file
                tmp.renameTo(oldFile);
        }
        catch(FileNotFoundException e)
        {
            // FileReader constructor might throw this exception
            System.err.println("Error: file \"" + timelineFile + "\" does not exist"); 
        }
        catch(IOException e)
        {
            // readLine() method might throw this exception
            System.err.println("Error: something bad happened reading" + timelineFile +", the file may be corrupt.  Editing the file independently of this program may cause problems" ); 
        }   
    }
/*********************************************************************************************************************************************************************/
     
/*********************************************************************************************************************************************************************/    
    
    public void setEventGui(String year, String title,String info, BufferedImage img)
    {
            YearLabel.setText(year);
            if(img != null) //if the image is not null
            {// Make a JLabel that will contain an ImageIcon object.  The ImageIcon object takes a Buffered Image as parameters
               if(img.getWidth()>400 || img.getHeight()>400)
               { //if the image is large, divide it in half
                Image image = (img.getScaledInstance((img.getWidth()/2),(img.getHeight()/2),1)); //reduce the size of the image
                frame.setIcon(new ImageIcon(image));
               }
               else{
                frame.setIcon(new ImageIcon(img));
               }
            }
            
            infoBox.setText(info); 
            Title.setText(title);
    }
    
    public void setEmptyEventGUI(int year)
    {
           infoBox.setText("");
           Title.setText("");
           frame.setIcon(null);
    }
/*********************************************************************************************************************************************************************/
      
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(timelineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(timelineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(timelineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(timelineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
              new timelineGUI().setVisible(true); 
            }
        });
    }
/*********************************************************************************************************************************************************************/
    
/*********************************************************************************************************************************************************************/
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     *  Build an already existing timeline by reading information from the proper timeline file    *
     *  and creating an array containing the information                                           *
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    
    private void buildTimeline(){
        
        
        int yearSet;
        JFileChooser fileChooser = new JFileChooser();
        File currentDIR = new File("Timelines");
        fileChooser.setCurrentDirectory(currentDIR);
        fileChooser.setDialogTitle("Choose a timeline");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("timeline files", "txt");
        fileChooser.setFileFilter(filter); //set the file filter to only search for png, jpg and gif images.
        this.getContentPane().add(fileChooser);
        fileChooser.setVisible(true);
        
        //System.out.println("Which timeline would you like to open?");
        int ret = fileChooser.showDialog(null, "Open"); //creates a custom file chooser dialog with a custom "Attach Image" button
        File timelineFile = null;
        
        if(ret == fileChooser.APPROVE_OPTION) //if the button has been clicked, get the selected file
        {
            timelineName = fileChooser.getName(fileChooser.getSelectedFile());
            System.out.println(timelineName);
            File parentDir = new File ("Timelines");
            timelineFile = new File(parentDir, timelineName);
        }
        
        try
        { 
            BufferedReader in = new BufferedReader( new FileReader(timelineFile) ); //make a BufferedReader class that reads from the desired Timeline file
            arrLength = Integer.parseInt(in.readLine());
            System.out.println(arrLength);
            endYear = Integer.parseInt(in.readLine());
            System.out.println(endYear);
        
            timelineArr = new Event[arrLength+1];
            System.out.println(timelineArr.length);
            System.out.println("endYear "+endYear);
            
            //If the timeline specified ends before year 0.  
            if(yearChoiceNew.getText().equals("B.C.E")){
                yearSet = endYear;
                for(int i = arrLength;i>=0;i--){
                    Event e = new Event(yearSet + " B.C.E",null,null,null,i);
                    timelineArr[i]=e;
                    yearSet--;
                }  
            }
            else{
        
                //SET the year variables in the array
                if((endYear - arrLength) < 0){
                    yearSet = 0;
                    //Starting from the point in the array where the year 0 would be found move up through the array modifying the year attributes of each event object
                    System.out.println("where year 0 is: " + (arrLength - endYear));
                    for(int i = (arrLength - endYear); i <= arrLength; i++){
                        Event e = new Event(yearSet + " C.E.",null,null,null,i);
                        timelineArr[i] = e;
                        //System.out.println(timelineArr[i].getYear());
                        yearSet++;
                    }
                    //Starting from the point in the array where the year 1 would be found move down through the array modifying the year attributes of each event object
                    yearSet = 1;
                    for (int i=(arrLength - endYear)-1; i >= 0; i--){
                        Event e = new Event(yearSet + " B.C.E.",null,null,null,i);
                        timelineArr[i] = e;
                        //System.out.println(timelineArr[i].getYear());
                        yearSet++;
                    }
                }
                //ELSE if the timeline specified does not extend before year 0
                else{
                    yearSet = endYear - arrLength;
                    System.out.println(yearSet);
                    for (int i=0; i <= arrLength; i++){
                        Event e = new Event(yearSet + " C.E.",null,null,null,i);
                        timelineArr[i] = e;
                        //System.out.println(timelineArr[i].getYear());
                        yearSet++;
                    }
                }
            }
            newButton.setVisible(false);
            openButton.setVisible(false);
            //READ data from the file to fill the array
            while(in.ready()) //While there are still lines in the file
            {
                System.out.println("reading lines");
                int index = Integer.parseInt(in.readLine()); //read the index of the event
                String year = (timelineArr[index].getYear()); //read the year from the array
                String title = in.readLine();//read the title
                String info = in.readLine(); //read the info from the next line, we will have to modify this to make it access as many lines as needed
                String stringImg = in.readLine(); //read the name of the picture that goes with this event
                BufferedImage img = null;
                try 
                {
                   img = ImageIO.read(new File("Timelines/"+stringImg)); //try to create a new image
                }
                catch (IOException e) {System.err.println("The image "+stringImg+" could not be found");}


                Event newEvent = new Event(year,title,info,img,index); //make a new event with the read values
                timelineArr[index] = newEvent; //put the event in the timeline array
            }
            buildSlider();
        }
        catch(NullPointerException e)
        {
           System.err.println("No file was selected");
        }
        catch(FileNotFoundException e)
        {
            // FileReader constructor might throw this exception
            System.err.println("Error: file \"" + timelineFile + "\" does not exist"); 
      
        }
        catch(IOException e)
        {
            // readLine() method might throw this exception
            System.err.println("Error: something bad happened reading" + timelineFile +", the file may be corrupt.  Editing the file independently of this program may cause problems" ); 
        }
         
    }
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     *  Build a new timeline and put it in the Timelines directory (build this directory if it     *
     *  does not yet exist) and create an array of the information in the timelinefile              *
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    
    private void buildNewTimeline()
    {
        int yearSet;
        Event[] timeline = new Event[arrLength+1];
        final File timelinesDir = new File("./Timelines"); //used to decide whether there is a Timelines directory 
        final File timelineFile;
        String filename;
        
        if(!timelinesDir.exists()) //if there is no current directory called Timelines, make one and put the new timeline in it
        { 
            File parentDir = new File("Timelines");
            parentDir.mkdir(); //actually make the directory
            filename = timelineName + ".txt";
            timelineFile = new File(parentDir, filename);
        }
        
        
        else //if the directory Timelines does exist then simply put a new timeline in it
        { 
       
            filename = timelineName + ".txt";
            
            timelineFile = new File("Timelines/"+filename); //make a new file in the Timelines directory
        }

            try
            {
                timelineFile.createNewFile(); // Creates a new file
            }
            catch(IOException e)
            {
                System.err.println("An I/O error occured, please try again");
            }
            
            try{
                File tmp = File.createTempFile("tmp",".txt"); //make a temporary file
                BufferedWriter bw = new BufferedWriter(new FileWriter(tmp));
                bw.write(Integer.toString(arrLength)+"\n");
                bw.write(Integer.toString(endYear)+"\n");
                bw.close();
                        
                File oldFile = timelineFile; //make a copy of the old file
                if (oldFile.delete()) //delete the file, if successful rename the tmp file and make it the usable file
                tmp.renameTo(oldFile);
                
            }
            catch(FileNotFoundException e)
            {
                // FileReader constructor might throw this exception
                System.err.println("Error: file \"" + timelineFile + "\" does not exist"); 
            }
            catch(IOException e)
            {
                // readLine() method might throw this exception
                System.err.println("Error: something bad happened reading" + timelineFile +", the file may be corrupt.  Editing the file independently of this program may cause problems" ); 
            } 
        
        //If the timeline specified ends before year 0.
        if(yearChoiceNew.getText().equals("B.C.E.")){
            yearSet = endYear;
            for(int i = arrLength;i>=0;i--){
                Event e = new Event(yearSet + " B.C.E",null,null,null,i);
                timeline[i]=e;
                yearSet++;
            }  
        }
        else{
        
            //IF the timeline specified does extend before year 0
            if((endYear - arrLength) < 0){
                yearSet = 0;
                //Starting from the point in the array where the year 0 would be found move up through the array modifying the year attributes of each event object
                for(int i = (arrLength - endYear); i <= arrLength; i++){
                    Event e = new Event(yearSet + " C.E.",null,null,null,i);
                    timeline[i] = e;
                    //System.out.println(timeline[i].getYear());
                    yearSet++;
                }
                //Starting from the point in the array where the year 1 would be found move down through the array modifying the year attributes of each event object
                yearSet = 1;
                for (int i=(arrLength - endYear)-1; i >= 0; i--){
                    Event e = new Event(yearSet + " B.C.E.",null,null,null,i);
                    timeline[i] = e;
                    //System.out.println(timeline[i].getYear());
                    yearSet++;
                }
            }

            //ELSE if the timeline specified does not extend before year 0
            else{
                yearSet = endYear - arrLength;
                //System.out.println(yearSet);
                for (int i=0; i <= arrLength; i++){
                    Event e = new Event(yearSet + " C.E.",null,null,null,i);
                    timeline[i] = e;
                    //System.out.println(timeline[i].getYear());
                    yearSet++;
                }
            }
        }
        timelineArr = timeline;
        buildSlider();   
    }
    
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
     *                                                                                              * 
     *                                                                                             *
     *                                                                                             * 
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
    public void buildSlider(){
        

        Timeline.setVisible(true);
        Edit.setVisible(true);
        Search.setVisible(true);
        Title.setVisible(true);
        TitleLabel.setVisible(true);
        YearLabel.setVisible(true);
        infoBox.setVisible(true);
        frame.setVisible(true);
        editPhoto.setVisible(true);
        yearChoice.setVisible(true);
         jScrollPane1.setVisible(true);
        
        
        //build the JSlider GUI with one less than the array length accounting for index[0]
        Timeline.setMaximum(arrLength);
        TitleLabel.setText(timelineName);

        Publish.setVisible(false); //hide

        infoBox.setLineWrap(true); //force the info to wrap nicely
        infoBox.setWrapStyleWord(true);
        System.out.println("GUI timeline created");
    }
/*********************************************************************************************************************************************************************/

    // Variables declaration - do not modify                     
    private javax.swing.JButton Edit;
    private javax.swing.JButton Publish;
    private javax.swing.JTextField Search;
    private javax.swing.JSlider Timeline;
    private javax.swing.JTextField Title;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JLabel YearLabel;
    private javax.swing.JButton editPhoto;
    private javax.swing.JTextField endYearField;
    private javax.swing.JLabel endYearPrompt;
    private javax.swing.JLabel errMsg;
    private javax.swing.JLabel frame;
    private javax.swing.JTextArea infoBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lengthField;
    private javax.swing.JLabel lengthPrompt;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel namePrompt;
    private javax.swing.JButton newButton;
    private javax.swing.JButton openButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel titleText;
    private javax.swing.JButton yearChoice;
    private javax.swing.JButton yearChoiceNew;
    // End of variables declaration                   
}

